import { Component, Input, ViewChild } from "@angular/core";
import { AngularComponentFactory } from "./component-factory";
import { EmbeddedViewContentComponent } from "./embedded-view-content.component";
import { getComponentName } from "./question";
import * as i0 from "@angular/core";
import * as i1 from "./errors.component";
import * as i2 from "./components/element-header/element-header.component";
import * as i3 from "./survey-string.component";
import * as i4 from "./comment.component";
import * as i5 from "@angular/common";
import * as i6 from "./utils/ng-show.directive";
import * as i7 from "./utils/dynamic.directive";
export class QuestionComponent extends EmbeddedViewContentComponent {
    getModel() {
        return this.model;
    }
    ngAfterViewInit() {
        var _a, _b;
        if (!!((_a = this.rootEl) === null || _a === void 0 ? void 0 : _a.nativeElement)) {
            this.model.afterRender((_b = this.rootEl) === null || _b === void 0 ? void 0 : _b.nativeElement);
        }
    }
    ngOnDestroy() {
        if (!!this.model) {
            this.model.destroyResizeObserver();
        }
    }
    getComponentName() { return getComponentName(this.model); }
    getQuestionContentWrapperComponentName() {
        return this.model.survey.getQuestionContentWrapperComponentName(this.model) || this.getComponentName();
    }
    getQuestionContentWrapperComponentData() {
        return {
            componentName: this.getComponentName(),
            componentData: {
                model: this.model,
                data: this.model.survey.getElementWrapperComponentData(this.model)
            }
        };
    }
}
QuestionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: QuestionComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
QuestionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: QuestionComponent, selector: "sv-ng-question", inputs: { model: "model" }, viewQueries: [{ propertyName: "rootEl", first: true, predicate: ["elementContainer"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<ng-template #template>\n  <div *ngIf=\"!!model\" #elementContainer [class]=\"model.getRootCss()\" [style]=\"model.getRootStyle()\" [id]=\"model.id\" [attr.data-name]=\"model.name\" [attr.role]=\"model.ariaRole\" [attr.aria-required]=\"model.ariaRequired\" [attr.aria-invalid]=\"model.ariaInvalid\" [attr.aria-labelledby]=\"model.ariaLabelledBy\" [attr.aria-expanded]=\"model.ariaExpanded\">\n    <div *ngIf=\"model.showErrorsAboveQuestion && model.hasVisibleErrors\" [element]=\"model\" sv-ng-errors></div>\n    <div [element]=\"model\" *ngIf=\"model.hasTitleOnLeftTop\" sv-ng-element-header></div>\n    <div [class]=\"model.cssContent\" role=\"presentation\" [visible]=\"!model.isCollapsed\">\n      <div *ngIf=\"model.showErrorOnTop && model.hasVisibleErrors\" [element]=\"model\" sv-ng-errors></div>\n      <ng-template [component]=\"{ name: getQuestionContentWrapperComponentName(), data: getQuestionContentWrapperComponentData(), default: 'skeleton-question' }\">\n      </ng-template>\n      <div *ngIf=\"model.hasComment\" [class]=\"model.getCommentAreaCss(false)\">\n        <div [model]=\"model.locCommentText\" sv-ng-string></div>\n        <sv-ng-comment [question]=\"model\"></sv-ng-comment>\n      </div>\n      <div *ngIf=\"model.showErrorOnBottom && model.hasVisibleErrors\" [element]=\"model\" sv-ng-errors></div>\n      <div *ngIf=\"model.isErrorsModeTooltip && model.hasVisibleErrors\" [element]=\"model\" [location]=\"'tooltip'\" sv-ng-errors></div>\n      <div *ngIf=\"model.hasDescriptionUnderInput\" [class]=\"model.cssDescription\" [model]=\"model.locDescription\" sv-ng-string></div>\n  </div>\n    <div [element]=\"model\" *ngIf=\"model.hasTitleOnBottom\" sv-ng-element-header></div>\n    <div *ngIf=\"model.showErrorsBelowQuestion && model.hasVisibleErrors\" [element]=\"model\" sv-ng-errors></div>\n  </div>\n</ng-template>", components: [{ type: i1.ErrorsComponent, selector: "'[sv-ng-errors]'", inputs: ["element", "location"] }, { type: i2.ElementHeaderComponent, selector: "'[sv-ng-element-header]'", inputs: ["element"] }, { type: i3.SurveyStringComponent, selector: "sv-ng-string, '[sv-ng-string]'", inputs: ["model"] }, { type: i4.SurveyCommentComponent, selector: "sv-ng-comment, '[sv-ng-comment]'", inputs: ["question"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.VisibleDirective, selector: "[visible]", inputs: ["visible"] }, { type: i7.DynamicComponentDirective, selector: "[component]", inputs: ["component"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: QuestionComponent, decorators: [{
            type: Component,
            args: [{
                    selector: "sv-ng-question",
                    templateUrl: "./question.component.html"
                }]
        }], propDecorators: { model: [{
                type: Input
            }], rootEl: [{
                type: ViewChild,
                args: ["elementContainer"]
            }] } });
AngularComponentFactory.Instance.registerComponent("question", QuestionComponent);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlc3Rpb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3F1ZXN0aW9uLmNvbXBvbmVudC50cyIsIi4uLy4uL3NyYy9xdWVzdGlvbi5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFjLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFeEUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDOUQsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDakYsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sWUFBWSxDQUFDOzs7Ozs7Ozs7QUFNOUMsTUFBTSxPQUFPLGlCQUFrQixTQUFRLDRCQUE0QjtJQUd2RCxRQUFRO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBQ0QsZUFBZTs7UUFDYixJQUFJLENBQUMsQ0FBQyxDQUFBLE1BQUEsSUFBSSxDQUFDLE1BQU0sMENBQUUsYUFBYSxDQUFBLEVBQUU7WUFDaEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBQSxJQUFJLENBQUMsTUFBTSwwQ0FBRSxhQUFhLENBQUMsQ0FBQztTQUNwRDtJQUNILENBQUM7SUFDRCxXQUFXO1FBQ1QsSUFBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNmLElBQUksQ0FBQyxLQUFLLENBQUMscUJBQXFCLEVBQUUsQ0FBQztTQUNwQztJQUNILENBQUM7SUFDTSxnQkFBZ0IsS0FBYSxPQUFPLGdCQUFnQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbkUsc0NBQXNDO1FBQzNDLE9BQWEsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFPLENBQUMsc0NBQXNDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQ2hILENBQUM7SUFDTSxzQ0FBc0M7UUFDM0MsT0FBTztZQUNMLGFBQWEsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDdEMsYUFBYSxFQUFFO2dCQUNiLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztnQkFDakIsSUFBSSxFQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTyxDQUFDLDhCQUE4QixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7YUFDMUU7U0FDRixDQUFDO0lBQ0osQ0FBQzs7K0dBNUJVLGlCQUFpQjttR0FBakIsaUJBQWlCLHFOQ1Y5Qiw0ekRBbUJjOzRGRFRELGlCQUFpQjtrQkFKN0IsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO29CQUMxQixXQUFXLEVBQUUsMkJBQTJCO2lCQUN6Qzs4QkFFVSxLQUFLO3NCQUFiLEtBQUs7Z0JBQ3lCLE1BQU07c0JBQXBDLFNBQVM7dUJBQUMsa0JBQWtCOztBQTZCL0IsdUJBQXVCLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBJbnB1dCwgVmlld0NoaWxkIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IFF1ZXN0aW9uIH0gZnJvbSBcInN1cnZleS1jb3JlXCI7XG5pbXBvcnQgeyBBbmd1bGFyQ29tcG9uZW50RmFjdG9yeSB9IGZyb20gXCIuL2NvbXBvbmVudC1mYWN0b3J5XCI7XG5pbXBvcnQgeyBFbWJlZGRlZFZpZXdDb250ZW50Q29tcG9uZW50IH0gZnJvbSBcIi4vZW1iZWRkZWQtdmlldy1jb250ZW50LmNvbXBvbmVudFwiO1xuaW1wb3J0IHsgZ2V0Q29tcG9uZW50TmFtZSB9IGZyb20gXCIuL3F1ZXN0aW9uXCI7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJzdi1uZy1xdWVzdGlvblwiLFxuICB0ZW1wbGF0ZVVybDogXCIuL3F1ZXN0aW9uLmNvbXBvbmVudC5odG1sXCJcbn0pXG5leHBvcnQgY2xhc3MgUXVlc3Rpb25Db21wb25lbnQgZXh0ZW5kcyBFbWJlZGRlZFZpZXdDb250ZW50Q29tcG9uZW50IHtcbiAgQElucHV0KCkgbW9kZWwhOiBRdWVzdGlvbjtcbiAgQFZpZXdDaGlsZChcImVsZW1lbnRDb250YWluZXJcIikgcm9vdEVsPzogRWxlbWVudFJlZjxIVE1MRGl2RWxlbWVudD47XG4gIHByb3RlY3RlZCBnZXRNb2RlbCgpOiBRdWVzdGlvbiB7XG4gICAgcmV0dXJuIHRoaXMubW9kZWw7XG4gIH1cbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIGlmICghIXRoaXMucm9vdEVsPy5uYXRpdmVFbGVtZW50KSB7XG4gICAgICB0aGlzLm1vZGVsLmFmdGVyUmVuZGVyKHRoaXMucm9vdEVsPy5uYXRpdmVFbGVtZW50KTtcbiAgICB9XG4gIH1cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYoISF0aGlzLm1vZGVsKSB7XG4gICAgICB0aGlzLm1vZGVsLmRlc3Ryb3lSZXNpemVPYnNlcnZlcigpO1xuICAgIH1cbiAgfVxuICBwdWJsaWMgZ2V0Q29tcG9uZW50TmFtZSgpOiBzdHJpbmcgeyByZXR1cm4gZ2V0Q29tcG9uZW50TmFtZSh0aGlzLm1vZGVsKTsgfVxuICBwdWJsaWMgZ2V0UXVlc3Rpb25Db250ZW50V3JhcHBlckNvbXBvbmVudE5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gKDxhbnk+dGhpcy5tb2RlbC5zdXJ2ZXkpLmdldFF1ZXN0aW9uQ29udGVudFdyYXBwZXJDb21wb25lbnROYW1lKHRoaXMubW9kZWwpIHx8IHRoaXMuZ2V0Q29tcG9uZW50TmFtZSgpO1xuICB9XG4gIHB1YmxpYyBnZXRRdWVzdGlvbkNvbnRlbnRXcmFwcGVyQ29tcG9uZW50RGF0YSgpOiBhbnkge1xuICAgIHJldHVybiB7XG4gICAgICBjb21wb25lbnROYW1lOiB0aGlzLmdldENvbXBvbmVudE5hbWUoKSxcbiAgICAgIGNvbXBvbmVudERhdGE6IHtcbiAgICAgICAgbW9kZWw6IHRoaXMubW9kZWwsXG4gICAgICAgIGRhdGE6ICg8YW55PnRoaXMubW9kZWwuc3VydmV5KS5nZXRFbGVtZW50V3JhcHBlckNvbXBvbmVudERhdGEodGhpcy5tb2RlbClcbiAgICAgIH1cbiAgICB9O1xuICB9XG59XG5cbkFuZ3VsYXJDb21wb25lbnRGYWN0b3J5Lkluc3RhbmNlLnJlZ2lzdGVyQ29tcG9uZW50KFwicXVlc3Rpb25cIiwgUXVlc3Rpb25Db21wb25lbnQpOyIsIjxuZy10ZW1wbGF0ZSAjdGVtcGxhdGU+XG4gIDxkaXYgKm5nSWY9XCIhIW1vZGVsXCIgI2VsZW1lbnRDb250YWluZXIgW2NsYXNzXT1cIm1vZGVsLmdldFJvb3RDc3MoKVwiIFtzdHlsZV09XCJtb2RlbC5nZXRSb290U3R5bGUoKVwiIFtpZF09XCJtb2RlbC5pZFwiIFthdHRyLmRhdGEtbmFtZV09XCJtb2RlbC5uYW1lXCIgW2F0dHIucm9sZV09XCJtb2RlbC5hcmlhUm9sZVwiIFthdHRyLmFyaWEtcmVxdWlyZWRdPVwibW9kZWwuYXJpYVJlcXVpcmVkXCIgW2F0dHIuYXJpYS1pbnZhbGlkXT1cIm1vZGVsLmFyaWFJbnZhbGlkXCIgW2F0dHIuYXJpYS1sYWJlbGxlZGJ5XT1cIm1vZGVsLmFyaWFMYWJlbGxlZEJ5XCIgW2F0dHIuYXJpYS1leHBhbmRlZF09XCJtb2RlbC5hcmlhRXhwYW5kZWRcIj5cbiAgICA8ZGl2ICpuZ0lmPVwibW9kZWwuc2hvd0Vycm9yc0Fib3ZlUXVlc3Rpb24gJiYgbW9kZWwuaGFzVmlzaWJsZUVycm9yc1wiIFtlbGVtZW50XT1cIm1vZGVsXCIgc3YtbmctZXJyb3JzPjwvZGl2PlxuICAgIDxkaXYgW2VsZW1lbnRdPVwibW9kZWxcIiAqbmdJZj1cIm1vZGVsLmhhc1RpdGxlT25MZWZ0VG9wXCIgc3YtbmctZWxlbWVudC1oZWFkZXI+PC9kaXY+XG4gICAgPGRpdiBbY2xhc3NdPVwibW9kZWwuY3NzQ29udGVudFwiIHJvbGU9XCJwcmVzZW50YXRpb25cIiBbdmlzaWJsZV09XCIhbW9kZWwuaXNDb2xsYXBzZWRcIj5cbiAgICAgIDxkaXYgKm5nSWY9XCJtb2RlbC5zaG93RXJyb3JPblRvcCAmJiBtb2RlbC5oYXNWaXNpYmxlRXJyb3JzXCIgW2VsZW1lbnRdPVwibW9kZWxcIiBzdi1uZy1lcnJvcnM+PC9kaXY+XG4gICAgICA8bmctdGVtcGxhdGUgW2NvbXBvbmVudF09XCJ7IG5hbWU6IGdldFF1ZXN0aW9uQ29udGVudFdyYXBwZXJDb21wb25lbnROYW1lKCksIGRhdGE6IGdldFF1ZXN0aW9uQ29udGVudFdyYXBwZXJDb21wb25lbnREYXRhKCksIGRlZmF1bHQ6ICdza2VsZXRvbi1xdWVzdGlvbicgfVwiPlxuICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICAgIDxkaXYgKm5nSWY9XCJtb2RlbC5oYXNDb21tZW50XCIgW2NsYXNzXT1cIm1vZGVsLmdldENvbW1lbnRBcmVhQ3NzKGZhbHNlKVwiPlxuICAgICAgICA8ZGl2IFttb2RlbF09XCJtb2RlbC5sb2NDb21tZW50VGV4dFwiIHN2LW5nLXN0cmluZz48L2Rpdj5cbiAgICAgICAgPHN2LW5nLWNvbW1lbnQgW3F1ZXN0aW9uXT1cIm1vZGVsXCI+PC9zdi1uZy1jb21tZW50PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2ICpuZ0lmPVwibW9kZWwuc2hvd0Vycm9yT25Cb3R0b20gJiYgbW9kZWwuaGFzVmlzaWJsZUVycm9yc1wiIFtlbGVtZW50XT1cIm1vZGVsXCIgc3YtbmctZXJyb3JzPjwvZGl2PlxuICAgICAgPGRpdiAqbmdJZj1cIm1vZGVsLmlzRXJyb3JzTW9kZVRvb2x0aXAgJiYgbW9kZWwuaGFzVmlzaWJsZUVycm9yc1wiIFtlbGVtZW50XT1cIm1vZGVsXCIgW2xvY2F0aW9uXT1cIid0b29sdGlwJ1wiIHN2LW5nLWVycm9ycz48L2Rpdj5cbiAgICAgIDxkaXYgKm5nSWY9XCJtb2RlbC5oYXNEZXNjcmlwdGlvblVuZGVySW5wdXRcIiBbY2xhc3NdPVwibW9kZWwuY3NzRGVzY3JpcHRpb25cIiBbbW9kZWxdPVwibW9kZWwubG9jRGVzY3JpcHRpb25cIiBzdi1uZy1zdHJpbmc+PC9kaXY+XG4gIDwvZGl2PlxuICAgIDxkaXYgW2VsZW1lbnRdPVwibW9kZWxcIiAqbmdJZj1cIm1vZGVsLmhhc1RpdGxlT25Cb3R0b21cIiBzdi1uZy1lbGVtZW50LWhlYWRlcj48L2Rpdj5cbiAgICA8ZGl2ICpuZ0lmPVwibW9kZWwuc2hvd0Vycm9yc0JlbG93UXVlc3Rpb24gJiYgbW9kZWwuaGFzVmlzaWJsZUVycm9yc1wiIFtlbGVtZW50XT1cIm1vZGVsXCIgc3YtbmctZXJyb3JzPjwvZGl2PlxuICA8L2Rpdj5cbjwvbmctdGVtcGxhdGU+Il19